name: test-pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/**

env:      
  ECR_REPOSITORY: test-pipeline

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-tags: true
        fetch-depth: 0
      
    - name: Configure Deployment Environment
      uses: Stonewall-Defense/configure-deployment-environment@main
      with:
        branch: ${{ github.ref }}
        application: rhino
        variables: ${{ toJson(vars) }}
        secrets: ${{ toJson(secrets) }}   
        valuesFile: .github/deployment/values.yaml           

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        ls
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Run CodeBuild
      uses: aws-actions/aws-codebuild-run-build@v1
      with:
        project-name: ${{ env.CODEBUILD_PROJECT }}
        disable-source-override: true
        env-vars-for-codebuild: |
          IMAGE_TAG,
          APPLICATION,
          NAMESPACE,
          VALUES_FILE,
          IMAGE_REPO,
          HOST,
          INGRESS_CLASS
      env:
        IMAGE_TAG: ${{ github.sha }}
        APPLICATION: ${{ env.ECR_REPOSITORY }}
        NAMESPACE: ${{ env.NAMESPACE }}
        VALUES_FILE: ${{ env.VALUES_FILE }}
        IMAGE_REPO: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        HOST: ${{ env.HOSTNAME }}
        INGRESS_CLASS: ${{ env.INGRESS_CLASS }}        
